--
-- PostgreSQL database dump
--

-- Dumped from database version 16rc1
-- Dumped by pg_dump version 16rc1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- Name: checkbeforedeletegroup(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkbeforedeletegroup() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
		if(OLD.id = 0) then
			RAISE EXCEPTION 'нельзя удалять специальную группу';
		end if;
        update people set group_id = 0 where group_id = OLD.id;

		RETURN old;
    END;
$$;


ALTER FUNCTION public.checkbeforedeletegroup() OWNER TO postgres;

--
-- Name: checkbeforedeletestudent(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkbeforedeletestudent() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF OLD.type = 'S' THEN
			delete from marks where student_id = OLD.id;
        END IF;

        RETURN OLD;
    END;
$$;


ALTER FUNCTION public.checkbeforedeletestudent() OWNER TO postgres;

--
-- Name: checkbeforedeletesubject(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkbeforedeletesubject() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF exists(select * from marks where subject_id = OLD.id) THEN
			RAISE EXCEPTION 'нельзя удалять предмет, если на него существуют ссылки';
        END IF;
        return old;
    END;
$$;


ALTER FUNCTION public.checkbeforedeletesubject() OWNER TO postgres;

--
-- Name: checkgroupname(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkgroupname() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF exists(select * from groups where name = NEW.name AND year=New.year AND kurs = new.kurs) THEN
            RAISE EXCEPTION 'Группа с таким наименованием уже существует';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkgroupname() OWNER TO postgres;

--
-- Name: checkgroupnamebeforeupdate(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkgroupnamebeforeupdate() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF NEW.name <> OLD.name and exists(select * from marks m, people p where p.id = m.student_id and p.group_id = OLD.id) THEN
            RAISE EXCEPTION 'нельзя изменить наименование группы, студенты которой получили хотя бы одну оценку';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkgroupnamebeforeupdate() OWNER TO postgres;

--
-- Name: checkmark(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkmark() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF NEW.value<2 or NEW.value > 5 or NEW.value is null THEN
            RAISE EXCEPTION 'Нельзя добавлять оценку, не попадающую в интервал [2..5]';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkmark() OWNER TO postgres;

--
-- Name: checkpeople(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkpeople() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF NEW.type <> 'P' and NEW.type <> 'S' THEN
            RAISE EXCEPTION 'Нельзя добавлять человека с типом отличным от («P», «S»)';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkpeople() OWNER TO postgres;

--
-- Name: checkpeoplebeforeupdate(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkpeoplebeforeupdate() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF OLD.type = 'P' and exists(select * from marks where teacher_id = OLD.id) THEN
            RAISE EXCEPTION 'нельзя изменить преподавателя у уже выставленной оценки';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkpeoplebeforeupdate() OWNER TO postgres;

--
-- Name: checkpeoplebeforeupdate_2(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkpeoplebeforeupdate_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF New.teacher_id <> OLD.teacher_id THEN
            RAISE EXCEPTION 'нельзя изменить преподавателя у уже выставленной оценки';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checkpeoplebeforeupdate_2() OWNER TO postgres;

--
-- Name: checksubjectnamebeforeupdate(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checksubjectnamebeforeupdate() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        IF NEW.name <> OLD.name and exists(select * from marks where subject_Id = OLD.id) THEN
            RAISE EXCEPTION 'нельзя изменить наименование предмета, если на него есть ссылки';
        END IF;

        RETURN NEW;
    END;
$$;


ALTER FUNCTION public.checksubjectnamebeforeupdate() OWNER TO postgres;

--
-- Name: getallavgmarksbyinterval(interval); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getallavgmarksbyinterval(input interval) RETURNS TABLE(kurs_ integer, name_ character varying, ye integer, avg numeric)
    LANGUAGE sql
    AS $$
  select g.kurs as kurs_, g.name as name_, g.year as year_, avg(m.value) as avg 
        from marks m, people p, groups g
        where m.student_id = p.id and p.group_id = g.id
        --make_date(year int, month int, day int)
        and now() - make_date(g.year, 1, 1) <= input
        group by g.id
$$;


ALTER FUNCTION public.getallavgmarksbyinterval(input interval) OWNER TO postgres;

--
-- Name: getallsubjectsbyyear(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getallsubjectsbyyear() RETURNS TABLE(name character varying, avg numeric)
    LANGUAGE sql
    AS $$
  select s.name, avg(m.value) from subjects s, marks m, people p, groups g
        where s.id = m.subject_id and m.student_id = p.id and p.group_id = g.id
              and g.year = 2018
        group by s.id
$$;


ALTER FUNCTION public.getallsubjectsbyyear() OWNER TO postgres;

--
-- Name: getmarksdiff(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getmarksdiff(period_in_days integer, OUT avg_mark_in_period numeric, OUT diff_avg_marks numeric) RETURNS record
    LANGUAGE plpgsql
    AS $$
    DECLARE
        row marks%rowtype;
        marks_cursor refcursor;
        double_period int;
        avg_mark_in_period_current numeric;
        avg_mark_in_period_before numeric;
        count_current int;
        count_before int;
BEGIN
    avg_mark_in_period_current := 0;
    avg_mark_in_period_before := 0;
    count_current := 0;
    count_before := 0;
    double_period := period_in_days * 2;
    OPEN marks_cursor FOR select m.* from marks m, people p, groups g where
                                    p.group_id = g.id and m.student_id = p.id and
                                    make_date(g.year, 1, 1) >= (now() - make_interval(days => double_period))
                                and make_date(g.year, 1, 1) <  (now() - make_interval(days => period_in_days));
    LOOP
        FETCH NEXT FROM marks_cursor INTO row;
        EXIT WHEN NOT FOUND;
        avg_mark_in_period_before := avg_mark_in_period_before + row.value;
        count_before := count_before + 1;
    END LOOP;
    Close marks_cursor;

    avg_mark_in_period_before := avg_mark_in_period_before / count_before;

    OPEN marks_cursor FOR select m.* from marks m, people p, groups g where
                                    p.group_id = g.id and m.student_id = p.id and
                                    make_date(g.year, 1, 1) >= (now() - make_interval(days => period_in_days));
    LOOP
        FETCH NEXT FROM marks_cursor INTO row;
        EXIT WHEN NOT FOUND;
        avg_mark_in_period_current := avg_mark_in_period_current + row.value;
        count_current := count_current + 1;
    END LOOP;
    Close marks_cursor;

	avg_mark_in_period_current := avg_mark_in_period_current / count_current;
    avg_mark_in_period := avg_mark_in_period_current;
    diff_avg_marks := avg_mark_in_period_current - avg_mark_in_period_before;
END $$;


ALTER FUNCTION public.getmarksdiff(period_in_days integer, OUT avg_mark_in_period numeric, OUT diff_avg_marks numeric) OWNER TO postgres;

--
-- Name: getminavgmarkgroupbyteacher(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getminavgmarkgroupbyteacher(teacherid integer) RETURNS TABLE(groupid integer)
    LANGUAGE sql
    AS $$
  (select id from (select avg(m.value)as avg, g.id as id  from people p, groups g, marks m
        where m.teacher_id = teacherId and p.group_id = g.id and m.student_id = p.id
        group by g.id
        --наименьший
        order by avg
        limit 1) as gggg);
$$;


ALTER FUNCTION public.getminavgmarkgroupbyteacher(teacherid integer) OWNER TO postgres;

--
-- Name: getsubjectandavgmarkbygroupid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getsubjectandavgmarkbygroupid(groupid integer, OUT subjectid integer, OUT avgmark numeric) RETURNS record
    LANGUAGE plpgsql
    AS $$
BEGIN
	select id into subjectId from (select m.subject_Id as id, avg(m.value) as avg_mark from marks m, people p
		where p.group_id = groupId and m.student_id = p.id
		group by m.subject_Id
		order by avg_mark
		limit 1) as gggg;

	select avg(m.value) as avg_mark into avgMark from marks m, people p
		where p.group_id <> groupId and m.student_id = p.id and m.subject_Id = subjectId
		group by p.group_id
		order by avg_mark
		limit 1;
	END;
$$;


ALTER FUNCTION public.getsubjectandavgmarkbygroupid(groupid integer, OUT subjectid integer, OUT avgmark numeric) OWNER TO postgres;

--
-- Name: toisostring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.toisostring(year integer, OUT iso_string character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
   iso_string := to_char(make_date(year, 1, 1)::timestamp at time zone 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS');
END
$$;


ALTER FUNCTION public.toisostring(year integer, OUT iso_string character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.groups (
    id integer NOT NULL,
    name character varying,
    kurs integer,
    year integer
);


ALTER TABLE public.groups OWNER TO postgres;

--
-- Name: marks; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.marks (
    id integer NOT NULL,
    student_id integer,
    subject_id integer,
    teacher_id integer,
    value integer
);


ALTER TABLE public.marks OWNER TO postgres;

--
-- Name: people; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.people (
    id integer NOT NULL,
    first_name character varying,
    last_name character varying,
    pather_name character varying,
    group_id integer,
    type character(1)
);


ALTER TABLE public.people OWNER TO postgres;

--
-- Name: avg_marks_by_student; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.avg_marks_by_student AS
 SELECT avg(m.value) AS avg,
    g.year
   FROM public.groups g,
    public.people p,
    public.marks m
  WHERE ((g.id = p.group_id) AND (p.id = m.student_id))
  GROUP BY g.year;


ALTER VIEW public.avg_marks_by_student OWNER TO postgres;

--
-- Name: avg_marks_by_teacher; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.avg_marks_by_teacher AS
SELECT
    NULL::character varying AS first_name,
    NULL::character varying AS last_name,
    NULL::character varying AS pather_name,
    NULL::character varying AS subject,
    NULL::numeric AS avg;


ALTER VIEW public.avg_marks_by_teacher OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.groups_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.groups_id_seq OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.groups_id_seq OWNED BY public.groups.id;


--
-- Name: marks_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.marks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.marks_id_seq OWNER TO postgres;

--
-- Name: marks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.marks_id_seq OWNED BY public.marks.id;


--
-- Name: people_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.people_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.people_id_seq OWNER TO postgres;

--
-- Name: people_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.people_id_seq OWNED BY public.people.id;


--
-- Name: subjects; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subjects (
    id integer NOT NULL,
    name character varying
);


ALTER TABLE public.subjects OWNER TO postgres;

--
-- Name: subjects_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.subjects_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.subjects_id_seq OWNER TO postgres;

--
-- Name: subjects_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.subjects_id_seq OWNED BY public.subjects.id;


--
-- Name: test; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.test (
    people integer NOT NULL,
    groups character varying(50) NOT NULL
);


ALTER TABLE public.test OWNER TO postgres;

--
-- Name: test_people_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.test ALTER COLUMN people ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.test_people_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    login character varying,
    password character varying,
    mode character varying
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: groups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups ALTER COLUMN id SET DEFAULT nextval('public.groups_id_seq'::regclass);


--
-- Name: marks id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.marks ALTER COLUMN id SET DEFAULT nextval('public.marks_id_seq'::regclass);


--
-- Name: people id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.people ALTER COLUMN id SET DEFAULT nextval('public.people_id_seq'::regclass);


--
-- Name: subjects id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subjects ALTER COLUMN id SET DEFAULT nextval('public.subjects_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.groups (id, name, kurs, year) FROM stdin;
3	081/1_	1	2019
1	081/1_	1	2018
5	082/1_	2	2019
2	081/2_	1	2018
12	081/1_	2	2019
14	081/1_	2	2019
15	081/1_	2	2019
16	081/1_	2	2019
21	081/1_	2	2019
27	081/1_	2	2019
28	082/1_	3	2019
9	081/2_	3	2019
0	deleted_group	\N	\N
32	091/1_	1	2020
\.


--
-- Data for Name: marks; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.marks (id, student_id, subject_id, teacher_id, value) FROM stdin;
15	8	4	4	3
21	11	2	2	3
27	13	4	4	4
29	14	2	2	3
42	18	2	2	4
43	18	3	3	4
44	19	4	4	3
54	24	2	2	3
19	10	2	1	2
12	8	2	1	4
28	14	2	1	5
20	11	2	1	4
24	13	2	2	5
53	24	2	2	4
22	11	3	2	4
26	13	3	2	5
57	53	2	1	5
64	12	2	4	4
65	12	6	4	5
6	6	2	2	4
\.


--
-- Data for Name: people; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.people (id, first_name, last_name, pather_name, group_id, type) FROM stdin;
1	Иванов	Иван	Иванович	\N	P
2	Чижиков	Кирилл	Семенович	\N	P
3	Бананова	Ольга	Васильевна	\N	P
4	Криволапова	Елена	Петровна	\N	P
5	Долгов	Василий	Николаевич	1	S
6	Яблокова	Валентина	Викторовна	1	S
8	Донских	Дарья	Ивановна	1	S
10	Святов	Гавриил	Михайлович	2	S
11	Жидова	Екатерина	Андреевна	2	S
12	Перцев	Александр	Дмитриевич	3	S
13	Капустин	Рафаил	Иванович	3	S
14	Гранатов	Уриил	Егорович	3	S
17	Белова	Анна	Ивановна	5	S
23	Волков	Петр	Иванович	9	S
24	Соловьев	Дмитрий	Артемович	9	S
27	Перцев	Александр	Дмитриевич	12	S
28	Капустин	Рафаил	Иванович	12	S
33	Перцев	Александр	Дмитриевич	14	S
34	Капустин	Рафаил	Иванович	14	S
35	Гранатов	Уриил	Егорович	14	S
36	Перцев	Александр	Дмитриевич	15	S
37	Капустин	Рафаил	Иванович	15	S
39	Перцев	Александр	Дмитриевич	16	S
40	Капустин	Рафаил	Иванович	16	S
45	Базаров	Евгений	Анатольевич	1	S
46	Перцев	Александр	Дмитриевич	21	S
47	Капустин	Рафаил	Иванович	21	S
49	Перцев	Александр	Дмитриевич	27	S
50	Капустин	Рафаил	Иванович	27	S
52	Белова	Анна	Ивановна	28	S
53	Жирафов	Николай	Иванович	9	S
18	Серова	Наталья	Алексеевна	5	S
19	Чернова	Анастасия	Петровна	5	S
20	Кремов	Борис	Борисович	5	S
54	Жирафов	Николай	Иванович	9	S
55	Жирафов	Николай	Иванович	9	S
58	Кузьмов	Валерий	Остапович	\N	P
59	Зубенко	Михаил	Петрович	\N	P
60	Зябликов	Георг	Попединский	21	S
65	Корнило	Павел	Ясикович	\N	S
66	Каперсов	ИГорь	Жубавич	\N	S
67	Кизяро	Кирилл	Албертович	\N	S
68	Усиков	Олег	Станиславович	\N	S
69	Воронов	Георг	Юстициариевич	\N	S
\.


--
-- Data for Name: subjects; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subjects (id, name) FROM stdin;
6	Древоведение
7	Мемология
8	Шаманизм
9	Некромантия
10	Жожология
5	Руны
2	Чароведение
4	Знание бесстеария
3	Алхимия
\.


--
-- Data for Name: test; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.test (people, groups) FROM stdin;
1	ghbxrtgfh
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, login, password, mode) FROM stdin;
2	viewio	SCRAM-SHA-256$4096:M6GbRpQq6HegVlm9drHpqw==$Vf0WLmBGaJk/3T9oZeejHnHeqeixDKnMqtkZYTpUJWs=:HR+b4QyCFdum01ytH5JfBwqYwCYd/u9aKx8udcrM+ik=	\N
1	adminio	SCRAM-SHA-256$4096:EQwqW+jJh+ODo7+0iNj/jA==$RBj3B9TwahfDCLdblMgHQOnW5pR2xGk4W4Ac5mRivkM=:7FberFTqCjHnLkwoIAy18t1NnjIPdleTAh/myVx5vg4=	\N
3	postgres	1234567	\N
\.


--
-- Name: groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.groups_id_seq', 35, true);


--
-- Name: marks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.marks_id_seq', 65, true);


--
-- Name: people_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.people_id_seq', 71, true);


--
-- Name: subjects_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.subjects_id_seq', 12, true);


--
-- Name: test_people_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.test_people_seq', 1, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 3, true);


--
-- Name: groups groups_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups
    ADD CONSTRAINT groups_pk PRIMARY KEY (id);


--
-- Name: marks marks_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.marks
    ADD CONSTRAINT marks_pk PRIMARY KEY (id);


--
-- Name: people people_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.people
    ADD CONSTRAINT people_pk PRIMARY KEY (id);


--
-- Name: subjects subjects_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subjects
    ADD CONSTRAINT subjects_pk PRIMARY KEY (id);


--
-- Name: test test_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.test
    ADD CONSTRAINT test_pkey PRIMARY KEY (people);


--
-- Name: users users_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pk PRIMARY KEY (id);


--
-- Name: groups_id_uindex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX groups_id_uindex ON public.groups USING btree (id);


--
-- Name: marks_id_uindex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX marks_id_uindex ON public.marks USING btree (id);


--
-- Name: people_id_uindex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX people_id_uindex ON public.people USING btree (id);


--
-- Name: subjects_id_uindex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX subjects_id_uindex ON public.subjects USING btree (id);


--
-- Name: avg_marks_by_teacher _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.avg_marks_by_teacher AS
 SELECT p.first_name,
    p.last_name,
    p.pather_name,
    s.name AS subject,
    avg(m.value) AS avg
   FROM public.marks m,
    public.subjects s,
    public.people p
  WHERE ((m.subject_id = s.id) AND (m.teacher_id = p.id))
  GROUP BY s.id, p.id;


--
-- Name: groups checkbeforedeletegrouptrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkbeforedeletegrouptrigger BEFORE DELETE ON public.groups FOR EACH ROW EXECUTE FUNCTION public.checkbeforedeletegroup();


--
-- Name: people checkbeforedeletestudenttrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkbeforedeletestudenttrigger BEFORE DELETE ON public.people FOR EACH ROW EXECUTE FUNCTION public.checkbeforedeletestudent();


--
-- Name: subjects checkbeforedeletesubjecttrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkbeforedeletesubjecttrigger BEFORE DELETE ON public.subjects FOR EACH ROW EXECUTE FUNCTION public.checkbeforedeletesubject();


--
-- Name: groups checkgroupnamebeforeupdatetrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkgroupnamebeforeupdatetrigger BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION public.checkgroupnamebeforeupdate();


--
-- Name: groups checkgroupnametrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkgroupnametrigger BEFORE INSERT ON public.groups FOR EACH ROW EXECUTE FUNCTION public.checkgroupname();


--
-- Name: marks checkmarktrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkmarktrigger BEFORE INSERT ON public.marks FOR EACH ROW EXECUTE FUNCTION public.checkmark();


--
-- Name: people checkpeoplebeforeupdatetrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkpeoplebeforeupdatetrigger BEFORE UPDATE ON public.people FOR EACH ROW EXECUTE FUNCTION public.checkpeoplebeforeupdate();


--
-- Name: marks checkpeoplebeforeupdatetrigger_2; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkpeoplebeforeupdatetrigger_2 BEFORE UPDATE ON public.marks FOR EACH ROW EXECUTE FUNCTION public.checkpeoplebeforeupdate_2();


--
-- Name: people checkpeopletrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER checkpeopletrigger BEFORE INSERT ON public.people FOR EACH ROW EXECUTE FUNCTION public.checkpeople();


--
-- Name: people group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.people
    ADD CONSTRAINT group_id FOREIGN KEY (group_id) REFERENCES public.groups(id);


--
-- Name: marks student_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.marks
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.people(id);


--
-- Name: marks subject_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.marks
    ADD CONSTRAINT subject_id FOREIGN KEY (subject_id) REFERENCES public.subjects(id);


--
-- Name: marks teacher_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.marks
    ADD CONSTRAINT teacher_id FOREIGN KEY (teacher_id) REFERENCES public.people(id);


--
-- Name: TABLE groups; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.groups TO administrator;


--
-- Name: TABLE marks; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.marks TO administrator;


--
-- Name: TABLE people; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.people TO administrator;


--
-- Name: TABLE subjects; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.subjects TO administrator;


--
-- Name: TABLE test; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.test TO administrator;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,UPDATE ON TABLE public.users TO administrator;


--
-- PostgreSQL database dump complete
--

